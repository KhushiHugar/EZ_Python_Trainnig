SORTING
-----------
swapping:(in python)
for i in range(0,n-1):
	if L[i]>L[i+1]:
		L[i],L[i+1]=L[i+1],L[i]



1.insertion sort
2.bubble sort
listt=[2,4,2,6,5,3,2]
for j in range(0,n):
	for i in range(0,n-1-j):
		if L[i]>L[i+1]:
			L[i],L[i+1]=L[i+1],L[i]
print(listt)

3.selection sort
4.merge sort

def Merge(left,right):
    i=j=0
    temp=[]
    while i<len(left) and j<len(right):
        if left[i]<right[j]:
            temp.append(left[i])
            i+=1
        else:
            temp.append(right[j])
            j+=1
    while i <len(left):
        temp.append(left[i])
        i+=1
    while j <len(right):
        temp.append(right[j])
        j+=1
    return temp
        
def Mergesort(L):
    if len(L) <=1:
        return L
    mid = len(L)//2
    left =L [:mid]
    right=L[mid:]
    left_sorted = Mergesort(left)
    right_sorted=Mergesort(right)
    return Merge(left_sorted,right_sorted)
if __name__=="__main__":
    print('enter list of elements to sort:')
    L=list(map(int,input().split()))
    sorted=Mergesort(L)
    print("Sorted Array = ",sorted)






5.quick sort
* find the pivot number(left to pivot number there should be numbers less than pivot number and larger numbers than pivot number should be right to it.)
* if i found smaller element than pivot then increase j by 1 and swap it by i.
*if i found bigger element than pivot , i will do nothing.

def divide(l,low,high):
    j=low-1
    pi=high
    for i in range(low,high):
        if l[i]<l[pi]:
            j+=1
            l[i],l[j]=l[j],l[i]
    j+=1
    l[pi],l[j]=l[j],l[pi]
    return j
def quick(l,low,high):
    if low<high:
        pi=divide(l,low,high)
        quick(l,low,pi-1)
        quick(l,pi+1,high)
    print(l)
l=[34,22,5,6,78,0,1]
quick(l,0,len(l)-1)
print(l)
